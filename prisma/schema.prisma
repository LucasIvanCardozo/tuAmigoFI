generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model correlatives {
  id                                           Int
  id_correlative                               Int
  courses_correlatives_id_correlativeTocourses courses @relation("correlatives_id_correlativeTocourses", fields: [id_correlative], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courses_correlatives_idTocourses             courses @relation("correlatives_idTocourses", fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, id_correlative])
}

model courses {
  id                                                Int               @id @default(autoincrement())
  name                                              String            @unique @db.VarChar
  name_normalized                                   String            @db.VarChar
  cg                                                Int?
  hs                                                Int?
  plan                                              Int
  optional                                          Boolean           @default(false)
  correlatives_correlatives_id_correlativeTocourses correlatives[]    @relation("correlatives_id_correlativeTocourses")
  correlatives_correlatives_idTocourses             correlatives[]    @relation("correlatives_idTocourses")
  courses_degrees                                   courses_degrees[]
  courses_links                                     courses_links[]
  courses_years                                     courses_years[]
  tps_courses                                       tps_courses[]

  @@index([name_normalized])
}

model courses_degrees {
  courses_id Int
  degrees_id Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  degrees    degrees @relation(fields: [degrees_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([courses_id, degrees_id])
}

model courses_links {
  courses_id Int
  links_id   Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  links      links   @relation(fields: [links_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([courses_id, links_id])
}

model courses_years {
  courses_id Int
  years_id   Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  years      years   @relation(fields: [years_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([courses_id, years_id])
}

model degrees {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar
  courses_degrees courses_degrees[]
}

model links {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar
  link          String          @db.VarChar
  official      Boolean
  courses_links courses_links[]
}

model problems {
  id              Int              @id @default(autoincrement())
  number          Int?
  text            String           @db.VarChar
  text_normalized String           @db.VarChar
  response        String?          @db.VarChar
  type            String?          @db.VarChar(5)
  response_plus   String?          @db.VarChar
  type_plus       String?          @db.VarChar(5)
  tps_problems    tps_problems[]
  user_reactions  user_reactions[]

  @@index([text_normalized])
}

model tps {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar
  number       Int?
  year         Int
  tps_courses  tps_courses[]
  tps_problems tps_problems[]

  @@unique([name, year], map: "tps_name_year_idx")
}

model tps_courses {
  tps_id     Int
  courses_id Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tps        tps     @relation(fields: [tps_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tps_id, courses_id])
}

model tps_problems {
  tps_id      Int
  problems_id Int
  problems    problems @relation(fields: [problems_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tps         tps      @relation(fields: [tps_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tps_id, problems_id])
}

model user_reactions {
  id         Int       @id @default(autoincrement())
  id_user    Int
  id_problem Int
  reaction   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  problems   problems  @relation(fields: [id_problem], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id_user, id_problem], map: "user_reactions_id_user_id_problem_idx")
}

model users {
  id             Int              @id @default(autoincrement())
  ip             String           @db.VarChar
  user_reactions user_reactions[]

  @@index([ip])
}

model years {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar
  courses_years courses_years[]
}
