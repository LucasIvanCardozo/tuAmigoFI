generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model correlatives {
  id                                           Int
  id_correlative                               Int
  courses_correlatives_id_correlativeTocourses courses @relation("correlatives_id_correlativeTocourses", fields: [id_correlative], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courses_correlatives_idTocourses             courses @relation("correlatives_idTocourses", fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id, id_correlative])
}

model courses {
  id                                                Int               @id @default(autoincrement())
  name                                              String            @unique @db.VarChar
  name_normalized                                   String            @db.VarChar
  cg                                                Int?
  hs                                                Int?
  optional                                          Boolean           @default(false)
  correlatives_correlatives_id_correlativeTocourses correlatives[]    @relation("correlatives_id_correlativeTocourses")
  correlatives_correlatives_idTocourses             correlatives[]    @relation("correlatives_idTocourses")
  courses_degrees                                   courses_degrees[]
  courses_years                                     courses_years[]
  links                                             links[]
  midterms                                          midterms[]
  tps                                               tps[]

  @@index([name_normalized])
  @@index([name_normalized], map: "courses_name_normalized_idx1")
}

model courses_degrees {
  courses_id Int
  degrees_id Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  degrees    degrees @relation(fields: [degrees_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([courses_id, degrees_id])
}

model courses_years {
  courses_id Int
  years_id   Int
  courses    courses @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  years      years   @relation(fields: [years_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([courses_id, years_id])
}

model degrees {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar
  courses_degrees courses_degrees[]
  degrees_plans   degrees_plans[]
}

model degrees_plans {
  degrees_id Int
  plans_id   Int
  degrees    degrees @relation(fields: [degrees_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plans      plans   @relation(fields: [plans_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([degrees_id, plans_id])
}

model links {
  id            Int             @id @default(autoincrement())
  id_course     Int
  name          String          @db.VarChar
  link          String          @db.VarChar
  official      Boolean
  id_user       Int
  courses       courses         @relation(fields: [id_course], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users           @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  links_reports links_reports[]
}

model links_reports {
  id         Int       @id @default(autoincrement())
  id_user    Int
  id_link    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  links      links     @relation(fields: [id_link], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_user, id_link], map: "links_reports_id_user_id_link_idx")
  @@index([id_link])
  @@index([id_user])
}

model midterms {
  id                 Int                  @id @default(autoincrement())
  id_course          Int
  name               String               @db.VarChar
  date               DateTime             @db.Date
  id_user            Int
  courses            courses              @relation(fields: [id_course], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users                @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  midterms_reports   midterms_reports[]
  midterms_responses midterms_responses[]

  @@unique([id, id_course], map: "midterms_id_id_course_idx")
}

model midterms_reactions {
  id                 Int                @id @default(autoincrement())
  id_user            Int
  id_response        Int
  reaction           Boolean
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  midterms_responses midterms_responses @relation(fields: [id_response], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users              @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_user, id_response], map: "midterms_reactions_id_user_id_response_idx")
  @@index([id_response])
  @@index([id_user])
}

model midterms_reports {
  id          Int       @id @default(autoincrement())
  id_user     Int
  id_midterms Int
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  midterms    midterms  @relation(fields: [id_midterms], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_user, id_midterms], map: "midterms_reports_id_user_id_midterms_idx")
  @@index([id_midterms])
  @@index([id_user])
}

model midterms_responses {
  id                 Int                  @id @default(autoincrement())
  id_midterm         Int
  number             Int
  type               Int
  text               String?              @db.VarChar
  id_user            Int
  midterms_reactions midterms_reactions[]
  midterms           midterms             @relation(fields: [id_midterm], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users                @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plans {
  id            Int             @id @default(autoincrement())
  year          Int             @unique
  degrees_plans degrees_plans[]
}

model tps {
  id            Int             @id @default(autoincrement())
  id_course     Int
  name          String          @db.VarChar
  number        Int?
  year          Int
  id_user       Int
  courses       courses         @relation(fields: [id_course], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users           @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tps_reports   tps_reports[]
  tps_responses tps_responses[]

  @@unique([id, id_course], map: "tps_id_id_course_idx")
}

model tps_reactions {
  id            Int           @id @default(autoincrement())
  id_user       Int
  id_response   Int
  reaction      Boolean
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  tps_responses tps_responses @relation(fields: [id_response], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_user, id_response], map: "tps_reactions_id_user_id_response_idx")
  @@index([id_response])
  @@index([id_user])
}

model tps_reports {
  id         Int       @id @default(autoincrement())
  id_user    Int
  id_tp      Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tps        tps       @relation(fields: [id_tp], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_user, id_tp], map: "tps_reports_id_user_id_tp_idx")
  @@index([id_tp])
  @@index([id_user])
}

model tps_responses {
  id            Int             @id @default(autoincrement())
  id_tp         Int
  number        Int
  type          Int
  text          String?         @db.VarChar
  id_user       Int
  tps_reactions tps_reactions[]
  tps           tps             @relation(fields: [id_tp], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users           @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique @db.VarChar
  name               String               @db.VarChar
  image              String               @db.VarChar
  tier               Int
  links              links[]
  links_reports      links_reports[]
  midterms           midterms[]
  midterms_reactions midterms_reactions[]
  midterms_reports   midterms_reports?
  midterms_responses midterms_responses[]
  tps                tps[]
  tps_reactions      tps_reactions[]
  tps_reports        tps_reports?
  tps_responses      tps_responses[]

  @@index([id])
}

model years {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar
  courses_years courses_years[]
}
